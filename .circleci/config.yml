# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@3.0

jobs:
  build-ebs-mac-xcode:
    parameters:
      xcode_version:
        default: "13.3.0"
        type: string
    macos:
      xcode: <<parameters.xcode_version>>
    environment:
      EBS_VERSION: 3.0.0
      NDI_PLUGIN_RELEASE_TAG: 4.9.1

      EBS_DEPS_PATH: /tmp/obs-deps
      EBS_DEPS_QT_PATH: /tmp/obs-deps-qt
      EBS_LIBWEBRTC_PATH: /tmp/libwebrtc/cmake
    steps:
      - checkout
      - run: git submodule sync
      - run: git -c http.sslVerify=false submodule update --init
      - run:
          name: install deps
          command: |
            brew install cmake
            brew install jack
            
            mkdir -p /tmp
            curl -L https://github.com/obsproject/obs-deps/releases/download/2022-02-13/macos-deps-2022-02-13-universal.tar.xz -o /tmp/obs-deps.tar.xz
            curl -L https://github.com/obsproject/obs-deps/releases/download/2022-02-13/macos-deps-qt-2022-02-13-universal.tar.xz -o /tmp/obs-deps-qt.tar.xz
            
            mkdir -p $EBS_DEPS_PATH
            mkdir -p $EBS_DEPS_QT_PATH
            tar -xzf /tmp/obs-deps.tar.xz -C $EBS_DEPS_PATH
            tar -xzf /tmp/obs-deps-qt.tar.xz -C $EBS_DEPS_QT_PATH
          working_directory: deps-install

      - run:
          name: get ndi runtime
          working_directory: /tmp
          command: |
            destFile="ndi-runtime.pkg"
            curl -L https://github.com/evercast/evercast-broadcaster-software/releases/download/3.0.0/ndi-runtime-4.5.1-macOS.pkg -o $destFile
            ls

      - run:
          name: get ndi runtime m1
          working_directory: /tmp
          command: |
            destFile="ndi-runtime-m1.pkg"
            curl -L https://github.com/evercast/evercast-broadcaster-software/releases/download/3.0.0/ndi-runtime-m1.pkg -o $destFile
            ls

      - run:
          name: get libwebrtc
          working_directory: /tmp
          command: |
            destFile="/tmp/libwebrtc"
            filename="libwebrtc.zip"
            curl -L https://github.com/evercast/evercast-broadcaster-software/releases/download/3.0.0/libwebrtc-87.zip -o $filename
            unzip -o ${filename} -d ${destFile}
            ls

      - run:
          name: build_EBS
          working_directory: .
          command: |
            ./CI/before-script-osx.sh
            cd build
            cmake --build . --config RELEASE

      - run:
          name: check built libs
          command: |
            ls ~/project/build/UI/obs-frontend-api/
            ls ~/project/build/libobs/
            ls /tmp/

      - run:
          name: build_NDI_PLUGIN
          working_directory: /tmp
          command: |
            MY_DIR=`eval echo ~$USER`
            echo $MY_DIR
            git clone -b $NDI_PLUGIN_RELEASE_TAG https://github.com/Palakis/obs-ndi.git
            cd obs-ndi
            mkdir build
            cd build
            cmake \
                -DLIBOBS_INCLUDE_DIR=$MY_DIR/project/libobs \
                -DLIBOBS_LIB=$MY_DIR/project/build/libobs/libobs.0.dylib \
                -DOBS_FRONTEND_LIB=$MY_DIR/project/build/UI/obs-frontend-api/libobs-frontend-api.dylib \
                -DQt5Core_DIR=$EBS_DEPS_QT_PATH/lib/cmake/Qt5Core \
                -DQt5Widgets_DIR=$EBS_DEPS_QT_PATH/lib/cmake/Qt5Widgets \
                -DQTDIR=$EBS_DEPS_QT_PATH \
                ../
            
            make

      - run:
          name: pack .app
          environment:
            NDI_PATH: /tmp/obs-ndi
            NDI_RUNTIME: /tmp/ndi-runtime.pkg
            NDI_M1_RUNTIME: /tmp/ndi-runtime-m1.pkg
          command: |
            sudo -E ./CI/before-deploy-osx.sh
            cd build/
            sudo -E sh ../CI/install/osx/app2dmg.sh
            mkdir -p artifacts
            cp ./EBS_"$EBS_VERSION"_Install.dmg ./artifacts/EBS_"$EBS_VERSION"_Install.dmg
            cd artifacts/
            ls

      - run:
          name: ckeck .app libs
          command: |
            echo "################################################"
            echo "## LIBS"
            echo " "
            ls ./build/EBS.app/Contents/Frameworks
            echo " "
            echo "################################################"
            echo "################################################"
            echo "## PLUGINS"
            echo " "
            ls ./build/EBS.app/Contents/PlugIns
            echo " "
            echo "################################################"
            

      - store_artifacts:
          path: build/artifacts

  build-ebs-win:
    executor:
      name: win/windows
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: install deps
          shell: bash.exe
          working_directory: deps-install
          command: |
            choco install cmake -y
            choco install 7zip

            echo "#####################################################"
            echo "## DOWNLOADING obs-deps"
            curl -L "https://github.com/obsproject/obs-deps/releases/download/win-2022-02-13/windows-deps-2022-02-13.zip" -o "obs-deps.zip"
            echo "## DOWNLOAD COMPLETED"
            7z x "obs-deps.zip" -o"obs-deps"
            echo "## UNZIP COMPLETED"
            ls
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING libwebrtc"
            curl -L "https://github.com/evercast/evercast-broadcaster-software/releases/download/3.0.0-win/libwebrtc.7z" -o "libwebrtc.7z"
            echo "## DOWNLOAD COMPLETED"
            7z x "libwebrtc.7z" -o"libwebrtc"
            echo "## UNZIP COMPLETED"
            ls
            echo "##########################"
            ls libwebrtc/
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING ndi runtime"
            curl -L "https://github.com/evercast/evercast-broadcaster-software/releases/download/3.0.0-win/ndi-runtime-5.0-Windows.exe" -o "ndi-runtime-5.0-Windows.exe"
            echo "## DOWNLOAD COMPLETED"
            ls
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING vc_redist.x64.exe"
            curl -L "https://aka.ms/vs/17/release/vc_redist.x64.exe" -o "vc_redist.x64.exe"
            echo "## DOWNLOAD COMPLETED"
            ls
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING Qt_5.15.2.7z"
            curl -L "https://cdn-fastly.obsproject.com/downloads/Qt_5.15.2.7z" -o "Qt_5.15.2.7z"
            7z x Qt_5.15.2.7z -oQt
            echo "## DOWNLOAD COMPLETED"
            ls
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING openssl-1.1.tgz"
            curl -L "https://libwebrtc-community-builds.s3.amazonaws.com/openssl-1.1.tgz" -o "openssl-1.1.tgz"
            tar -xzf openssl-1.1.tgz
            echo "## DOWNLOAD COMPLETED"
            ls
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING vlc.zip"
            curl -L "https://cdn-fastly.obsproject.com/downloads/vlc.zip" -o "vlc.zip"
            7z x vlc.zip -ovlc
            echo "## DOWNLOAD COMPLETED"
            ls
            echo "##########################"

            echo "#####################################################"
            echo "## DOWNLOADING ffmpeg-4.4.1-full_build.7z"
            curl -L "https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-4.4.1-full_build.7z" -o "ffmpeg.7z"
            7z x ffmpeg.7z -offmpeg
            echo "## DOWNLOAD COMPLETED"
            ls
            echo "##########################"

      - run:
          name: prepare build folder
          shell: bash.exe
          working_directory: build
          command: |
            cp ../deps-install/vc_redist.x64.exe vc_redist.x64.exe
            cp ../deps-install/ndi-runtime-5.0-Windows.exe ndi-runtime-5.0-Windows.exe
            cp ../CI/install/win/ebs.ico ebs.ico

            echo "## CONTENT:"
            ls

      - run:
          name: check VC
          shell: bash.exe
          command: |
            echo "## 1"
            ls "/c/Program Files (x86)/"
            echo "## 1.1"
            choco install visualstudio2019buildtools
            ls "/c/Program Files (x86)/"
            echo "## 2"
            ls "/c/Program Files (x86)/Microsoft Visual Studio/2019/"
            echo "## 3"
            ls "/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/"
            echo "## 4"
            pwd


      - run:
          name: check VC
          shell: bash.exe
          command: |

            cd "/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build"
            ./vcvars64.bat

            echo "### MSVC versions"
            ls "/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC"
            echo "###"

            ls "/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/"

      - run:
          name: build
          shell: cmd.exe
          working_directory: CI/util
          environment:
            build_config: Release
            EBS_VERSION: 3.0.0
            EBS_VERSION_MAJOR: 3
            EBS_VERSION_MINOR: 0
            EBS_VERSION_PATCH: 0

            libwebrtcPath: ~/project/deps-install/libwebrtc/cmake
            opensslPath: ~/project/deps-install/openssl-1.1/x64
            QTDIR64: ~/project/deps-install/Qt/5.15.2/msvc2019_64
            ffmpegPath: ~/project/deps-install/ffmpeg
            DepsPath64: ~/project/deps-install/obs-deps/win64
            VLCPath: ~/project/deps-install/vlc
            NDIPath:

          command: .\win_build_ci.cmd
            

      - run:
          name: check build dir
          shell: bash.exe
          working_directory: build
          command: |
            ls

workflows:
#  build-ebs-mac-workflow:
#    jobs:
#      - build-ebs-mac-xcode:
#          matrix:
#            parameters:
#              xcode_version:
#                - 13.3.0
#                - 13.2.1
#                - 12.4.0

  build-ebs-win-workflow:
    jobs:
      - build-ebs-win
